0 Preparations

- chess dataset(s)
- libraries : python-chess
- indexes : 

    letters_2_num = {'a':0, 'b':1, ...}
    num_2_letters = {0:'a', 1:'b', ...}



1st step -  represent chess board in matrix

- create function which represents chess board in a matrix for each piece
- create function which converts matrix into np array

[[0 0 0 0 0 0 0 0]
[-1 -1 -1 -1 -1 -1 -1 -1]
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]               
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0]]

e.g pawns (for every piece a matrix represenation)




2nd step : represent a move

2 matrixes 

"from" matrix                   

[[0 0 0 0 0 0 0 0]                                  
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 1 0 0 0]
[0 0 0 0 0 0 0 0]]


"to" matrix

[[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 1 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0]]


In this way, the neural net deals with the positioning of the pieces, where we make use of convolutional layers

- convert moves into uci format (e.g d4e5)
- define position "from matrix"
- define position "to matrix"

-> end up with moves



3rd Step  : PyTorch dataset


- function :
pick random move, represent move on board


4th step : CNN

never made a CNN, maybe MNIST?


5th Step : pick moves (legal ones)

several functions (video)



6th step

improve further with reinforcement learning (if enough time)


Questions :

- The CNN learns how to play with itself : How to create CNN which reacts with moves from players? ChatGPT :


import chess
import torch

# Initialize the board and model
board = chess.Board()
model = MyChessModel()  # Your pre-trained PyTorch model

while not board.is_game_over():
    # Get player's move
    player_move = input("Your move: ")
    
    # Parse and apply the player's move
    if chess.Move.from_uci(player_move) in board.legal_moves:
        board.push(chess.Move.from_uci(player_move))
    else:
        print("Illegal move, try again.")
        continue

    # Convert board state to model input
    model_input = board_to_tensor(board)
    
    # Get model's move
    with torch.no_grad():
        model_output = model(model_input)
    engine_move = model_output_to_move(model_output, board)

    # Apply the engine's move
    board.push(engine_move)
    print("Engine's move:", engine_move.uci())

print("Game over:", board.result())



- Represent everything in UI : (several libraries: pygame, further research needed)

        

https://www.youtube.com/watch?v=aOwvRvTPQrs







